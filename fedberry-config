#!/bin/bash -
# Copyright (C) 2017, Vaughan Agrez <devel@agrez.net>
# fedberry-config is released under GPL licence (version 3)
# See LICENSE file for copyright and license details


###
# VARIABLE_DEFINITIONS
###

### Software
NAME=fedberry-config
AUTHORS="Vaughan Agrez"
YEAR=2017
VERSION=0.3.11
BUG_REPORTS="https://github.com/fedberry/fedberry-config"


### System config dirs & files
BOOT_DIR=/boot
ETC_DIR=/etc
CFG_TXT=$BOOT_DIR/config.txt
CMD_TXT=$BOOT_DIR/cmdline.txt
DTO_DIR=$BOOT_DIR/overlays
MODULES_DIR=/usr/lib/modules
FSTAB=$ETC_DIR/fstab
SE_CFG=$ETC_DIR/selinux/config
OS_RELEASE=$ETC_DIR/os-release


### OS environment / hardware
ARCH=$(arch| sed -r 's/([6-7])l/\1hl/')
OS_NAME=$(awk -F= '/^NAME=/ { print $2 }' $OS_RELEASE)
OS_VER_ID=$(awk -F= '/^VERSION_ID/ { print $2 }' $OS_RELEASE)
RPI_MODEL=$( </sys/firmware/devicetree/base/model)
BOARD_REV=$(awk '/Revision/ { print $3 }' /proc/cpuinfo)

### Misc standard messages / args
TXT_ENB="is currently ENABLED.\n\nDo you want to DISABLE it?"
TXT_DIS="is currently DISABLED.\n\nDo you want to ENABLE it?"
MENU_ARGS="MENU_TITLES MENU_BUTTONS MENU_ITEMS MENU_ACTIONS"

### Default DTP & config opt values
declare -A DEF_VALS=(
    [gpu_mem]=32
    [start_x]=0
    [i2c]=on
    [i2s]=on
    [spi]=on
    [audio]=on
    [audio_pwm_mode]=2
    [disable_audio_dither]=1
    )

### Name references for various DTOs, DTPs & config options
declare -A REF_NAMES=(
    [allo-boss-dac-pcm512x-audio]="Allo Boss DAC audio card support"
    [allo-digione]="Allo Digione audio card support"
    [audio]="Onboard alsa audio interface"
    [audio_pwm_mode]="Sigma-Delta audio driver"
    [fe-pi-audio]="Fe-Pi Audio sound card support"
    [googlevoicehat-soundcard]="Google Voice HAT sound card support"
    [hifiberry-amp]="HifiBerry Amp & Amp+ audio card support"
    [hifiberry-dac]="HifiBerry DAC audio card support"
    [hifiberry-dacplus]="HifiBerry DAC+ audio card support"
    [hifiberry-digi]="HifiBerry Digi & Digi+ audio card support"
    [hifiberry-digi-pro]="HifiBerry Digi+ Pro audio card support"
    [iqaudio-dac]="IQaudio DAC audio card support"
    [iqaudio-dacplus]="IQaudio DAC+ audio card support"
    [iqaudio-digi-wm8804-audio]="IQAudIO Digi WM8804 audio card support"
    [i2c-rtc]="I2C RTC support"
    [i2s]="I2S interface"
    [lirc-rpi]="RPi LIRC support"
    [pi3-disable-wifi]="RPi3 onboard WiFi"
    [spi]="SPI interface"
    [start_x]="RPi Camera"
    [vc4-fkms-v3d]="VC4 Mesa/Dispmanx"
    [vc4-kms-v3d]="VC4 Mesa"
    )

### Board manufacturing information
declare -A MFG_INFO=(
    [a01040]="Sony, UK"
    [a01041]="Sony, UK"
    [a21041]="Embest, China"
    [a22042]="Embest, China"
    [a02082]="Sony, UK"
    [a22082]="Embest, China"
    [a32082]="Sony, Japan"
    )


###
# FUNCTION_DEFINITIONS
###

msg_box()
{
    if [[ $NO_DIALOG -ne 1 ]]; then
        if [ -z "$2" ]; then
            whiptail --msgbox "$1" 20 60
        else
            whiptail --msgbox --title "$1" "$2" 20 60
        fi
    else
        echo -e "$1\n\n$2"
    fi
}


yes_no()
{
    if [ -z "$2" ]; then
        whiptail --yesno "$1" 20 60
    else
        whiptail --yesno --title "$1" "$2" 20 60
    fi
}


ask_reboot()
{
    # If needed, offer a reboot
    if [[ $SGST_REBOOT -eq 1 ]]; then
        if [ -z "$1" ]; then
            yes_no "Reboot Required" "A reboot is required for changes to take affect.\n\nDo you want to reboot now?"
        else
            yes_no "Reboot Required" "$1\n\nDo you want to reboot now?"
        fi

        if [ $? == 0 ]; then
            sync
            # add a timer option here to delay reboot by 5 secs?
            shutdown -r now
            exit 0
        fi
    fi
}


dialog_menu()
{
    while true; do
        local -n TITLE=$1
        local -n BUTTONS=$2
        local -n ITEMS=$3
        local -n ACTIONS=$4

        DLG_CMD=(whiptail --title "${TITLE[0]}" --menu "${TITLE[1]}" --backtitle "$OS_NAME $OS_VER_ID ($ARCH)" --ok-button "${BUTTONS[0]}" --cancel-button "${BUTTONS[1]}" $DLG_H $DLG_W $DLG_MH)

        SEL=$("${DLG_CMD[@]}" "${ITEMS[@]}" 3>&1 1>&2 2>&3)
        RETVAL=$?

        case $RETVAL in
            0) eval ${ACTIONS[$SEL]} ;;
            1) break ;;
            255) echo "Esc Pressed" ;;
        esac
    done
}


dialog_prog()
{
    whiptail --gauge "$1" 10 70 0
}


dialog_size()
{
    DLG_H=17
    DLG_MH=$(($DLG_H-9))
    DLG_W=$(tput cols)

    if [ -z "$DLG_W" -a "$DLG_W" -lt 60 ]; then
        DLG_W=80
    elif [ "$DLG_W" -gt 178 ]; then
        DLG_W=120
    fi
}


dtree_enable()
{
    # Force enabling of Device Tree support
    if [[ $(grep -cim1 ^device_tree= $CFG_TXT) -eq 1 ]]; then
        # remember, its the opposite!
        cfg_disable device_tree
    fi
}


dto_probe()
{
    # Define the DTO variables
    DTO="dtoverlay=$1"
    DTB="$1-overlay.dtb"
    DTBO="$1.dtbo"

    # Test config.txt for DTO
    DTO_ENABLED=$(grep -cim1 ^$DTO $CFG_TXT)
    DTO_DISABLED=$(grep -cim1 ^#$DTO $CFG_TXT)
}


dto_enable()
{
    dto_probe $1

    if [ ! -f $DTO_DIR/$DTB ] && [ ! -f $DTO_DIR/$DTBO ]; then
        echo "ERROR:" "can't find $DTO or $DTBO in current kernel"
        return 0
    fi

    if [ $DTO_DISABLED -eq 1 ]; then
        dto_write enable $1
        SGST_REBOOT=1
    elif [ $DTO_ENABLED -ne 1 ]; then
        dto_write add $1
        SGST_REBOOT=1
    fi
}


dto_disable()
{
    dto_probe $1
    if [ $DTO_ENABLED -eq 1 ]; then
        dto_write disable $1
        SGST_REBOOT=1
    fi
}


dto_write()
{
    if [ $1 == "enable" ]; then
        dtree_enable
        sed -i "s/^#$DTO/$DTO/" $CFG_TXT
        dyn_dto_add $2
    elif [ $1 == "add" ]; then
        dtree_enable
        echo -e "$DTO" >> $CFG_TXT
        dyn_dto_add $2
    elif [ $1 == "disable" ]; then
        sed -i "s/^$DTO/#$DTO/" $CFG_TXT
        dyn_dto_rem $2
    fi
}


dto_prm_update()
{
    # 1st arg = DTO name; 2nd arg = new parameter; 3rd arg = new value
    if [ $3 != "" ]; then
        sed -i "s/^dtoverlay=$1.*$/dtoverlay=$1,$2=$3/" $CFG_TXT
    elif [ $2 != "" ]; then
        sed -i "s/^dtoverlay=$1.*$/dtoverlay=$1,$2/" $CFG_TXT
        dyn_dto_add $1 $2
    else
        dyn_dto_add $1
    fi
}


dto_ask()
{
    # reset for each selection 
    BAILED=0
    DRV_DISABLED=0

    # hackity hack! sometimes overlays work backwards :-/
    REVERSE=$(echo "$@"| grep -ci "\-\-reverse")
    if [ $REVERSE -eq 1 ]; then
        MSG_DIS=$TXT_ENB
        MSG_ENB=$TXT_DIS
    else
        MSG_DIS=$TXT_DIS
        MSG_ENB=$TXT_ENB
    fi

    # test config.txt for DTO references
    dto_probe $1

    if [ ! -f $DTO_DIR/$DTB ] && [ ! -f $DTO_DIR/$DTBO ]; then
        msg_box "ERROR:" "can't find $DTO or $DTBO in current kernel"
        NO_OVERLAY=1
    else
        if [ $DTO_ENABLED -eq 1 ]; then
            # DTO is enabled already
            yes_no "${REF_NAMES[$1]} $MSG_ENB"
            if [ $? -eq 0 ]; then
                SGST_REBOOT=1
                DRV_DISABLED=1
                dto_write disable $1
            else
                BAILED=1
            fi
        elif [ $DTO_DISABLED -eq 1 ]; then
            # DTO is disabled
            yes_no "${REF_NAMES[$1]} $MSG_DIS"
            if [ $? -eq 0 ]; then
                SGST_REBOOT=1
                dto_write enable $1
            else
                BAILED=1
            fi
        else
            # no DTO ref exists, add the requested DTO
            yes_no "${REF_NAMES[$1]} $MSG_DIS"
            if [ $? -eq 0 ]; then
                SGST_REBOOT=1
                dto_write add $1
            else
                BAILED=1
            fi
        fi
    fi
}


dtp_probe()
{
    # Test for config option
    DTP_ENABLED=$(grep -cim1 ^dtparam=$1 $CFG_TXT)
    DTP_DISABLED=$(grep -cim1 ^#dtparam=$1 $CFG_TXT)
    DTP_VAL=$(grep -E "^dtparam=$1|^#dtparam=$1" $CFG_TXT| sed "s/.*$1=//")
}


dtp_enable()
{
    dtp_probe $1
    if [ $DTP_DISABLED -eq 1 ]; then
        dtp_write enable $1
        SGST_REBOOT=1
    elif [ $DTP_ENABLED -ne 1 ]; then
        dtp_write add $1
        SGST_REBOOT=1
    fi
}


dtp_disable()
{
    dtp_probe $1
    if [ $DTP_ENABLED -eq 1 ]; then
        dtp_write disable $1
        SGST_REBOOT=1
    fi
}


dtp_write()
{
    if [ $1 == "enable" ]; then
        sed -i "s/^#dtparam=$2/dtparam=$2/" $CFG_TXT
    elif [ $1 == "add" ]; then
        echo "dtparam=$2=${DEF_VALS[$2]}" >> $CFG_TXT
    elif [ $1 == "disable" ]; then
        sed -i "s/^dtparam=$2/#dtparam=$2/" $CFG_TXT
    fi
}


dyn_dto_add()
{
    # Sometimes we don't want DTO's loaded dynamically (eg. vc4!)
    [ "$DYN_DTO" == "false" ] && return 0

    # 1st arg = DTO name; 2nd arg = new parameter
    if [ "$2" != "" ]; then
        if ! dtoverlay -l |grep -c "$2" &>/dev/null; then
            dtoverlay $1 $2 &>/dev/null
        fi
    else
        if ! dtoverlay -l |grep -c "$1" &>/dev/null; then
            dtoverlay $1 &>/dev/null
        fi
    fi

    # If dynamically loading the DTO is successful,
    # don't suggest a reboot
    [ $? -eq 0 ] && SGST_REBOOT=0

    unset DYN_DTO
}


dyn_dto_rem()
{
    if dtoverlay -l |grep -c "$1" &>/dev/null; then
        dtoverlay -R $1 &>/dev/null
        [ $? -eq 0 ] && SGST_REBOOT=0
    fi
}


dtp_ask()
{
    # reset for each selection
    BAILED=0

   # test for config.txt option
    dtp_probe $1

    if [ $DTP_ENABLED -eq 1 ]; then
        # dtp ref is enabled already
        yes_no "${REF_NAMES[$1]} $TXT_ENB"
        if [ $? -eq 0 ]; then
            dtp_write disable $1
            SGST_REBOOT=1
            OPT_DISABLED=1
        else
            BAILED=1
        fi
    elif [ $DTP_DISABLED -eq 1 ]; then
        # config ref is disabled
        yes_no "${REF_NAMES[$1]} $TXT_DIS"
        if [ $? -eq 0 ]; then
            dtp_write enable $1
            SGST_REBOOT=1
        else
            BAILED=1
        fi
    else
        # no config ref exists, add it
        yes_no "${REF_NAMES[$1]} $TXT_DIS"
        if [ $? -eq 0 ]; then
            dtp_write add $1
            SGST_REBOOT=1
        else
            BAILED=1
        fi
    fi
}



cfg_probe()
{
    # Test for config option
    CFG_ENABLED=$(grep -cim1 ^$1 $CFG_TXT)
    CFG_DISABLED=$(grep -cim1 ^#$1 $CFG_TXT)
    CFG_VAL=$(grep -E "^$1|^#$1" $CFG_TXT| sed "s/.*$1=//")
}


cfg_enable()
{
    cfg_probe $1
    if [ $CFG_DISABLED -eq 1 ]; then
        cfg_write enable $1
        SGST_REBOOT=1
    elif [ $CFG_ENABLED -ne 1 ]; then
        cfg_write add $1
        SGST_REBOOT=1
    fi
}


cfg_disable()
{
    cfg_probe $1
    if [ $CFG_ENABLED -eq 1 ]; then
        cfg_write disable $1
        SGST_REBOOT=1
    fi
}


cfg_write()
{
    if [ $1 == "enable" ]; then
        sed -i "s/^#$2/$2/" $CFG_TXT
    elif [ $1 == "add" ]; then
        echo "$2=${DEF_VALS[$2]}" >> $CFG_TXT
    elif [ $1 == "disable" ]; then
        sed -i "s/^$2/#$2/" $CFG_TXT
    fi
}


config_ask()
{
    # reset for each selection 
    BAILED=0

   # test for config.txt option
    cfg_probe $1

    if [ $CFG_ENABLED -eq 1 ]; then
        # config ref is enabled already
        yes_no "${REF_NAMES[$1]} $TXT_ENB"
        if [ $? -eq 0 ]; then
            cfg_write disable $1
            SGST_REBOOT=1
            OPT_DISABLED=1
        else
            BAILED=1
        fi
    elif [ $CFG_DISABLED -eq 1 ]; then
        # config ref is disabled
        yes_no "${REF_NAMES[$1]} $TXT_DIS"
        if [ $? -eq 0 ]; then
            cfg_write enable $1
            SGST_REBOOT=1
        else
            BAILED=1
        fi
    else
        # no config ref exists, add it
        yes_no "${REF_NAMES[$1]} $TXT_DIS"
        if [ $? -eq 0 ]; then
            cfg_write add $1
            SGST_REBOOT=1
        else
            BAILED=1
        fi
    fi
}


cfg_check()
{
    # We need a config.txt
    if [ ! -f $CFG_TXT ]; then
        echo "Can't find $CFG_TXT\nPlease check your system!"
        # Offer the option to create one here?
        exit 1
    fi

    # NOTE: It adds another layer of complexity to deal with device_tree_param/dtparam
    # and device_tree_overlay/dtoverlay refs independently. So if found, just replace
    # them all accordingly

    if [[ $(grep -cim1 device_tree_param $CFG_TXT) -eq 1 ]]; then
        sed -i 's/device_tree_param/dtparam/' $CFG_TXT
    fi

    if [[ $(grep -cim1 device_tree_overlay $CFG_TXT) -eq 1 ]]; then
        sed -i 's/device_tree_overlay/dtoverlay/' $CFG_TXT
    fi
}


cfg_val_update()
{
    # 1st arg = config / paramater name; 2nd arg = new parameter value
    sed -i "s/^$1=.*$/$1=$2/" $CFG_TXT
}


boot_kernel()
{
    VMLINUZ=vmlinuz-$1
    KERNEL_DIR=$MODULES_DIR/$1

    # find & set the kernel's dtb dir
    if [ -d "$KERNEL_DIR/dtb" ]; then
        DTB_DIR=$KERNEL_DIR/dtb
    elif [ -d "$BOOT_DIR/dtb-$1" ]; then
        DTB_DIR=$BOOT_DIR/dtb-$1
    else
        msg_box "ERROR:" "Can't find DTB dir for selected kernel. Aborting."
        return 0
    fi

    if [ "$ARCH" == "armv7hl" ]; then
        KERN_IMG=$BOOT_DIR/kernel7.img
    else
        KERN_IMG=$BOOT_DIR/kernel.img
    fi

    # NOTE The bcm2708_fb driver is used downstream but not upstream,
    # making it a suitable predicate symbol.
    if [ -f "$KERNEL_DIR/System.map" ]; then
        KERN_DOWN=$(grep -cim1 bcm2708_fb $KERNEL_DIR/System.map)
    elif [ -f "$BOOT_DIR/System.map-$1" ]; then
        KERN_DOWN=$(grep -cim1 bcm2708_fb $BOOT_DIR/System.map-$1)
    else
        KERN_DOWN=0
    fi

    ### Clean and copy over dtb files
    rm -f $BOOT_DIR/*.dtb

    if [ $KERN_DOWN -eq 1 ] ; then
        if [ "$ARCH" == "armv7hl" ]; then
            cp -f $DTB_DIR/bcm2709* $BOOT_DIR/ &>/dev/null
            cp -f $DTB_DIR/bcm2710* $BOOT_DIR/ &>/dev/null
        else
            # assume its armv6hl arch
            cp -f $DTB_DIR/dtb/bcm2708* $BOOT_DIR/ &>/dev/null
        fi
    else
        cp -f $DTB_DIR/dtb/bcm28* $BOOT_DIR/ &>/dev/null
    fi

    ### Copy selected kernel
    if [ -f $KERNEL_DIR/vmlinuz ]; then
        cp -f $KERNEL_DIR/vmlinuz $KERN_IMG &>/dev/null
    elif [ -f $BOOT_DIR/$VMLINUZ ]; then
        cp -f $BOOT_DIR/$VMLINUZ $KERN_IMG &>/dev/null
    else
        msg_box "ERROR:" "Can't find selected kernel image. Aborting."
        return 0
    fi

    ### Clean and copy overlays for downstream/custom kerenls
    rm -f $BOOT_DIR/overlays/* &>/dev/null

    if [ -d "$DTB_DIR/overlays" ]; then
        cp $DTB_DIR/overlays/* $BOOT_DIR/overlays/ &>/dev/null
    fi

    SGST_REBOOT=1
    msg_box "The $1 kernel will be used when $OS_NAME $OS_VER_ID is rebooted"
}


ask_vc4()
{
    DYN_DTO=false dto_ask $1
    if [[ $BAILED -ne 1 ]] && [[ $NO_OVERLAY -ne 1 ]]; then
        if [[ $DRV_DISABLED -eq 1 ]]; then
            cfg_enable gpu_mem
            # check for & re-enable fbturbo driver if exists
            if rpm -q xorg-x11-drv-fbturbo > /dev/null; then
                FIND_FBTURBO=$(grep -Hs fbturbo /etc/X11/xorg.conf.d/*.bak)
                if [ $? -eq 0 ]; then
                    FBTURBO_BAK=$(echo $FIND_FBTURBO |sed 's|:.*||')
                    FBTURBO_CONF=$(echo $FBTURBO_BAK |sed 's|\.bak||')
                    mv -f $FBTURBO_BAK $FBTURBO_CONF
                fi
            fi
        else
            cfg_disable gpu_mem
            # currently conflicts with pi camera requirements
            cfg_disable start_x
            # the two vc4 overlays conflict with one another
            if [ "$1" == "vc4-fkms-v3d" ]; then
                dto_disable vc4-kms-v3d
            elif [ "$1" == "vc4-kms-v3d" ]; then
                dto_disable vc4-fkms-v3d
            fi
            # check fbturbo driver conf and disable if exists
            FIND_FBTURBO=$(grep -Hs fbturbo /etc/X11/xorg.conf.d/*.conf)
            if [ $? -eq 0 ]; then
                FBTURBO_CONF=$(echo $FIND_FBTURBO |sed s'|:.*||')
                mv -f $FBTURBO_CONF $FBTURBO_CONF.bak
            fi
        fi
    fi
}


pi_camera()
{
    config_ask start_x
    if [[ $BAILED -ne 1 ]]; then
        if [[ $OPT_DISABLED -ne 1 ]]; then
            cfg_enable gpu_mem
            # currrently conflicts with the vc4 driver requirements
            dto_disable vc4-kms-v3d
            dto_disable vc4-fkms-v3d
            [[ $CFG_VALUE -lt 128 ]] && cfg_val_update gpu_mem 128
        fi
    fi
}


bt_ask()
{
    if hcitool dev |grep hci &>/dev/null || systemctl is-enabled brcm43438.service &>/dev/null; then
        yes_no "DISABLE RPi 3 Bluetooth" "Do you want to DISABLE bluetooth support for your RPi 3?"
        [ $? == 1 ] && return 0 || bt_disable
    else
        yes_no "ENABLE RPi 3 Bluetooth" "Do you want to ENABLE bluetooth support for your RPi 3?"
        [ $? == 1 ] && return 0 || bt_enable
    fi
}


bt_enable()
{
    rpi3_req

    # check for software support
    if ! rpm -q bluetooth-rpi3 &>/dev/null; then 
        msg_box "The bluetooth-rpi3 package is not installed, please install.\n\nFor example: dnf install bluetooth-rpi3"
        return 0
        # Need to spend some time figuring out how to wrap dnf with progress bar code
        # so we can offer to install required pachages when not found.
        #if [ $? == 0 ]; then
        #    dnf -y --quiet install bluetooth-rpi3
        #fi
    fi

    # ensure pi3-disable-bt overlay is disabled
    dto_disable pi3-disable-bt

    # enable / start systemd service
    systemctl enable brcm43438.service &>/dev/null
    systemctl start brcm43438.service &>/dev/null
}


bt_disable()
{
    # stop & disable systemd service
    systemctl stop brcm43438.service  &>/dev/null
    systemctl disable brcm43438.service  &>/dev/null

    # enable pi3-disable-bt overlay
    dto_enable pi3-disable-bt
}


rpi3_req()
{
    # bail if not an RPi3
    if ! echo $RPI_MODEL |grep -c "Raspberry Pi 3" &>/dev/null; then
        msg_box "Raspberry Pi 3 Model B not found, can not proceed"
        break
    else
        return 0
    fi
}


audio_pwm_mode()
{
    msg_box "Sigma-Delta Audio Driver" "The sigma-delta audio driver is an EXPERIMENTAL analogue audio driver that significantly improves sound quality from the 3.5mm audio jack.\n\nFor more information please read:\n\nhttps://www.raspberrypi.org/forums/viewtopic.php?f=29&t=136445"

    config_ask audio_pwm_mode
    if [[ $BAILED -ne 1 ]]; then
        if [[ $OPT_DISABLED -ne 1 ]]; then
            cfg_enable disable_audio_dither
        else
            cfg_disable disable_audio_dither
        fi
    fi
}


bootsplash()
{
    SPLASH_OPTS="rhgb plymouth.ignore-serial-consoles logo.nologo"

    if [ $OS_VER_ID -lt 25 ]; then
        msg_box "Plymouth Graphical Bootsplash" "Plymouth graphical bootsplash is currently unsupported in FedBerry $OS_VER_ID"
        return 0
    fi

    if [ "$1" == "enable" ]; then
        for i in $SPLASH_OPTS; do
            if ! grep -q "$i" $CMD_TXT; then
                sed -i "1s/$/ $i/" $CMD_TXT
            fi
        done
        msg_box "Plymouth graphical bootsplash has been enabled."
    elif [ "$1" == "disable" ]; then
        for i in $SPLASH_OPTS; do
            if grep -q "$i" $CMD_TXT; then
                sed -i "s/ $i//" $CMD_TXT
            fi
        done
        msg_box "Plymouth graphical bootsplash has been disabled."
    fi
}


swap_add()
{
    # we need an argument
    if [[ "$1" == "" ]]; then
        echo "Missing argument"
        return 0
    fi

    # check for existing swap file
    CHECK_SWAP=$(swapon --show --noheadings)
    if [ "$CHECK_SWAP" != "" ]; then
        msg_box "Existing swap file/partition found, can not proceed."
        return 0
    fi

    # check for sufficient disk space (swap + min 1GB extra?)
    ROOTFS_INFO=( $(df |grep " /$") )
    ROOTFS_FREE=$(echo ${ROOTFS_INFO[3]})
    SWAP_REQ=$(($1 * 1024))
    REQ_FREE=$(($SWAP_REQ + 1048576))

    if [ $ROOTFS_FREE -lt $REQ_FREE ]; then
        msg_box "Insufficient free space on rootfs."
        return 0
    fi

    # create swap file & format it.
    SWAP_MSG="Creating $1MB swap file, please wait..."

    if [ $NO_DIALOG -eq 1 ]; then
        msg_box "$SWAP_MSG"
        pv -p --size "$1"M -S /dev/zero | dd of=/swapfile bs=1k count="$1"k status=noxfer
        mkswap /swapfile
    else
        (pv -n --size "$1"M -S /dev/zero | dd of=/swapfile bs=1k count="$1"k status=noxfer && mkswap /swapfile) 2>&1 | dialog_prog "$SWAP_MSG"
    fi

    # could we use fallocate here as its much faster? or will we end up with a sparse file?
    # Note: Btrfs does not support swap files and fallocate may cause problems with F2FS or XFS
    # fallocate -l '$1'M /swapfile

    # world readable swap files are a huge local vulnerability
    chmod 600 /swapfile &>/dev/null

    # activate it
    swapon /swapfile &>/dev/null

    # enable it at boot
    echo "/swapfile swap swap defaults 0 0" >>$FSTAB
}


rootfs_ask()
{
    yes_no "Expand Root Filesystem" "Do you want to grow your root filesystem?\n\nWARNING: Before continuing, please save any work as the system will automatically reboot after re-partitioning"
        if [ $? == 0 ]; then
            touch /.rootfs-repartition
            rootfs_grow
        fi
}


rootfs_grow()
{
    # Do we need to repartition?
    [ ! -e /.rootfs-repartition ] && return 0

    # Check for kernel cmdline parameter 'nofsresize'
    [ $(cat /proc/cmdline |grep -cim1 nofsresize) -eq 1 ] && return 0

    #Get root device
    ROOT_PART=$(mount |awk '/on \/ type/ { print $1 }')

    if [ ! -e /.rootfs-grow ]; then
        # Grab required partition & block device information
        BLK_DEV=$(echo ${ROOT_PART//[p,1-9]/})
        DEV_INFO=$(fdisk -l $BLK_DEV)
        PART_INFO=( $(echo "$DEV_INFO" |awk 'END{print}') )
        LAST_PART=$(echo ${PART_INFO[0]})    

        if [ "$ROOT_PART" != "$LAST_PART" ]; then
            msg_box "Root partition $ROOT_PART is not the last partiton. Can not proceed."
            rm -f /.rootfs-repartition &>/dev/null
            return 0
        fi

        SIZE_INFO=( $(echo "$DEV_INFO" |grep "Disk $BLK_DEV") )
        TOTAL_SECTS=$(echo ${SIZE_INFO[6]})
        START_SECT=$(echo ${PART_INFO[1]})
        END_SECT=$(echo ${PART_INFO[2]})
        PART_NUM=$(echo ${ROOT_PART//[!1-9]/})
        FREE_SECTS=$(($TOTAL_SECTS - $END_SECT))

        # Ensure there is enough space to grow the root partition
        if [ $FREE_SECTS -lt 10 ]; then
            msg_box "Not enough space remaining on $ROOT_PART. The root parition can not be further expanded."
            rm -f /.rootfs-repartition &>/dev/null
            return 0
        fi

        # Uggh! I know, this is an ugly hack but at the moment I just don't trust parted
        # to do the job on SD cards >=64GB. It seems to mess things up!
        echo -e "\np\nd\n$PART_NUM\nn\np\n$PART_NUM\n$START_SECT\n\nw"| fdisk $BLK_DEV &>/dev/null

        touch /.rootfs-grow
        systemctl enable rootfs-grow.service &>/dev/null
        systemctl reboot &>/dev/null
    else
        resize2fs $ROOT_PART &>/dev/null
        rm -f /.rootfs-grow /.rootfs-repartition &>/dev/null

        # Don't want it running every boot as its job is already done.
        systemctl disable rootfs-grow.service &>/dev/null
    fi
}


selinux()
{
    # if needed, get current selinux mode
    [ ! -v SE_MODE ] && sys_info

    # Selinux-policy needs to be installed
    if [ ! -e $SE_CFG ]; then
        msg_box "selinux-policy is not installed. Can not enable selinux."
        return 0
    fi

    MSG_RLB="SELinux is now set to $1 mode.\n\nPlease reboot to enable SELinux & relabel the file system.\n\nPlease Note: Relabeling may take a long time, depending on file system size."

    if [[ "$SE_MODE" == "Enforcing" ]]; then
        if [[ "$1" == "enforcing" ]]; then
            selinux_enable $1
            msg_box "SELinux is set to $1 mode"
        elif [[ "$1" == "permissive" ]]; then
            setenforce 0
            selinux_enable $1
            msg_box "SELinux is now set to $1 mode"
        elif [[ "$1" == "disabled" ]]; then
            selinux_disable
            SGST_REBOOT=1
        fi
    fi

    if [[ "$SE_MODE" == "Permissive" ]]; then
        if [[ "$1" == "enforcing" ]]; then
            setenforce 1
            selinux_enable $1
            msg_box "SELinux is now set to $1 mode"
        elif [[ "$1" == "permissive" ]]; then
            selinux_enable $1
            msg_box "SELinux is set to $1 mode"
        elif [[ "$1" == "disabled" ]]; then
            selinux_disable
            SGST_REBOOT=1
        fi
    fi

    if [[ "$SE_MODE" == "Disabled" ]]; then
        if [[ "$1" == "enforcing" ]]; then
            selinux_enable $1
            msg_box "$MSG_RLB"
            SGST_REBOOT=1
        elif [[ "$1" == "permissive" ]]; then
            selinux_enable $1
            msg_box "$MSG_RLB"
            SGST_REBOOT=1
        elif [[ "$1" == "disabled" ]]; then
            msg_box "SELinux is already disabled"
            sed -i 's/^SELINUX=.*/SELINUX=disabled/' $SE_CFG
            if ! grep -q "selinux=0" $CMD_TXT; then
                sed -i '1s/$/ selinux=0/' $CMD_TXT
            fi
        fi
    fi
}


selinux_disable()
{
    # Temporarily set permissive mode until selinux is disabled at next boot
    setenforce 0
    if ! grep -q "selinux=0" $CMD_TXT; then sed -i '1s/$/ selinux=0/' $CMD_TXT; fi
    if grep -q "selinux=1" $CMD_TXT; then sed -i 's/selinux=1/selinux=0/' $CMD_TXT; fi
    sed -i 's/^SELINUX=.*/SELINUX=disabled/' $SE_CFG
    msg_box "SELinux has been disabled.\n\nPlease reboot your system to apply changes."
}

selinux_enable()
{
    sed -i -e 's/ selinux=0//' -e 's/ audit=0//' $CMD_TXT
    sed -i "s/^SELINUX=.*/SELINUX=$1/" $SE_CFG
}


menu_bootsplash()
{
    local MENU_TITLES=(
    "Plymouth Bootsplash" "Choose Bootsplash Options")

    local MENU_BUTTONS=("Select" "Cancel")

    local MENU_ITEMS=(
    "1. Enable Bootsplash " "Enable plymouth graphical bootsplash"
    "2. Disable Bootsplash " "Disable plymouth graphical bootsplash")

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]="bootsplash enable ; break"
    [${MENU_ITEMS[2]}]="bootsplash disable ; break")

    dialog_menu $MENU_ARGS
}


menu_selinux()
{
    sys_info # Get SE_MODE

    local MENU_TITLES=(
    "SELinux Status: $SE_MODE" "Choose SELinux Mode:")

    local MENU_BUTTONS=("Select" "Cancel")

    local MENU_ITEMS=(
    "1. Set Enforcing Mode" "Security policy is enforced"
    "2. Set Permissive Mode" "Print warnings instead of enforcing"
    "3. Disable SELinux" "SELinux is Disabled")

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]="selinux enforcing ; break"
    [${MENU_ITEMS[2]}]="selinux permissive ; break"
    [${MENU_ITEMS[4]}]="selinux disabled ; break")

    dialog_menu $MENU_ARGS
}


menu_vc4()
{
    msg_box "WARNING" "The Mesa VC4 driver is EXPERIMENTAL and a W.I.P. It will likely cause system instability."

    local MENU_TITLES=(
    "VC4 Driver Selection" "Choose the VC4 driver stack:")

    local MENU_BUTTONS=("Select" "Cancel")

    local MENU_ITEMS=(
    "1. VC4 V3D + DispmanX " "DRM VC4 V3D driver using dispmanx display stack"
    "2. VC4 HDMI/HVS/V3D " "DRM VC4 HDMI/HVS/V3D driver")

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]="ask_vc4 vc4-fkms-v3d ; break"
    [${MENU_ITEMS[2]}]="ask_vc4 vc4-kms-v3d ; break")

    dialog_menu $MENU_ARGS
}


menu_kernel()
{
    # get current running kernel version
    sys_info

    local MENU_TITLES=(
    "Current running kernel version: $CUR_KERN" "Select the kernel version for next boot:")

    local MENU_BUTTONS=("Select" "Cancel")

    # list installed kernels
    read -ra KERNEL_LIST <<<$(ls $MODULES_DIR)

    local MENU_ITEMS
    declare -A MENU_ACTIONS

    for i in `seq 1 ${#KERNEL_LIST[@]}`; do
        MENU_ITEMS=("${MENU_ITEMS[@]}" "$i. Kernel" "${KERNEL_LIST[$(($i-1))]}")
        MENU_ACTIONS["$i. Kernel"]="boot_kernel ${KERNEL_LIST[$(($i-1))]} ; break"
    done

    dialog_menu $MENU_ARGS
}


menu_swap()
{
    local MENU_TITLES=(
    "Swap File Selection" "Choose required swap file size")

    local MENU_BUTTONS=("Select" "Cancel")

    local MENU_ITEMS=(
    "1. 256 MB " "Create and enable a 256MB swap file"
    "2. 512 MB " "Create and enable a 512MB swap file"
    "3. 1024 MB  " "Create and enable a 1024MB (1GB) swap file")

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]="swap_add 256 ; break"
    [${MENU_ITEMS[2]}]="swap_add 512 ; break"
    [${MENU_ITEMS[4]}]="swap_add 1024 ; break")

    dialog_menu $MENU_ARGS
}


menu_rtc()
{
    # We don't have to enable i2c interface first here as the DTO should
    # automatically enable it (refer: /boot/overlay/README)
    dto_ask i2c-rtc

    # check we haven't bailed or disabled the driver
    [ $BAILED -eq 1 -o $DRV_DISABLED -eq 1 ] && break

    # ensure nortc is not in cmdline.txt
    sed -i 's/ nortc//' $CMD_TXT &>/dev/null

    local MENU_TITLES=(
    "RTC Device Selection" "Choose your I2C Real Time Clock device")

    local MENU_BUTTONS=("Select" "Cancel")

    local MENU_ITEMS=(
    "1. abx80x " "Select the abx80x family"
    "2. DS1307 " "Select the DS1307 device"
    "3. DS1339 " "Select the DS1339 device"
    "4. DS3231  " "Select the DS3231 device"
    "5. MCP7940x " "Select the MCP7940x device"
    "6. MCP7941x " "Select the MCP7941x device"
    "7. PCF2127 " "Select the PCF2127 device"
    "8. PCF8523 " "Select the PCF8523 device"
    "9. PCF8563 " "Select the PCF8563 device")

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]="dto_prm_update i2c-rtc abx80x; break"
    [${MENU_ITEMS[2]}]="dto_prm_update i2c-rtc ds1307; break"
    [${MENU_ITEMS[4]}]="dto_prm_update i2c-rtc ds1339; break"
    [${MENU_ITEMS[6]}]="dto_prm_update i2c-rtc ds3231; break"
    [${MENU_ITEMS[8]}]="dto_prm_update i2c-rtc mcp7940x; break"
    [${MENU_ITEMS[10]}]="dto_prm_update i2c-rtc mcp7941x; break"
    [${MENU_ITEMS[12]}]="dto_prm_update i2c-rtc pcf2127; break"
    [${MENU_ITEMS[14]}]="dto_prm_update i2c-rtc pcf8523; break"
    [${MENU_ITEMS[16]}]="dto_prm_update i2c-rtc pcf8563; break")

    dialog_menu $MENU_ARGS
}


menu_main()
{
    local MENU_TITLES=("Main Menu" "Choose an Option")

    local MENU_BUTTONS=("Select" "Exit")

    local MENU_ITEMS=(
    "1. System Configuration" "Configure various system options"
    "2. RPi Interfaces" "Configure RPi hardware interfaces"
    "3. Video/Display" "Configure video & display devices"
    "4. Audio" "Configure audio devices"
    "5. Network" "Configure network devices"
    "6. Other" "Configure other miscellaneous devices"
    "7. System Info" "Show current system information"
    "8. About $NAME" "Information about this configuration utility")

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]=menu_system
    [${MENU_ITEMS[2]}]=menu_intfce
    [${MENU_ITEMS[4]}]=menu_video
    [${MENU_ITEMS[6]}]=menu_audio
    [${MENU_ITEMS[8]}]=menu_network
    [${MENU_ITEMS[10]}]=menu_misc
    [${MENU_ITEMS[12]}]=show_info
    [${MENU_ITEMS[14]}]=about)

    dialog_menu $MENU_ARGS
}


menu_system()
{
    local MENU_TITLES=("System Configuration" "Choose an Option")

    local MENU_BUTTONS=("Select" "Main Menu")

    local MENU_ITEMS=(
    "1. Set Boot Kernel" "Select kernel to use for booting the system"
    "2. Bootsplash" "Enable/disable plymouth graphical bootsplash"
    "3. SELinux" "Configure SELinux options"
    "4. Add Swap File" "Add and enable a swap file"
    "5. Expand Root FS" "Expand (grow) root filesystem on SD card"
    )

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]=menu_kernel
    [${MENU_ITEMS[2]}]=menu_bootsplash
    [${MENU_ITEMS[4]}]=menu_selinux
    [${MENU_ITEMS[6]}]=menu_swap
    [${MENU_ITEMS[8]}]=rootfs_ask
    )

    dialog_menu $MENU_ARGS
}


menu_intfce()
{
    local MENU_TITLES=(
    "Enable/Disable Hardware Interfaces" "Choose an Option")

    local MENU_BUTTONS=("Select" "Cancel")

    local MENU_ITEMS=(
    "1. I2C interface" "Inter-Integrated Circuit (i2c) interface"
    "2. I2S interface" "Inter-IC Sound, (i2s) interface"
    "3. SPI interface" "Serial Peripheral Interface")

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]="dtp_ask i2c"
    [${MENU_ITEMS[2]}]="dtp_ask i2s"
    [${MENU_ITEMS[4]}]="dtp_ask spi")

    dialog_menu $MENU_ARGS
}


menu_video()
{
    local MENU_TITLES=(
    "Enable/Disable Video & Display Devices" "Choose an Option")

    local MENU_BUTTONS=("Select" "Cancel")

    local MENU_ITEMS=(
    "1. Pi Camera" "Enable/disable the RPi Camera"
    "2. Mesa DRM VC4" "Mesa/DRM VC4 driver for RPi (Experimental)")

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]=pi_camera
    [${MENU_ITEMS[2]}]=menu_vc4)

    dialog_menu $MENU_ARGS
}


menu_audio()
{
    local MENU_TITLES=(
    "Enable/Disable Audio Devices" "Choose an Option")

    local MENU_BUTTONS=("Select" "Cancel")

    local MENU_ITEMS=(
    "1. RPi Audio" "Enable/disable on-board ALSA audio interface"
    "2. RPi Sigma-Delta" "Enable/disable sigma-delta audio driver (Experimental)"
    "3. Allo Boss DAC" "Enable/disable Allo Boss DAC audio card support"
    "4. Allo Digione" "Enable/disable Allo Digione audio card support"
    "5. Fe-Pi Audio" "Enable/disable Fe-Pi Audio sound card support"
    "6. Google VoiceHAT" "Enable/disable Google VoiceHAT sound card support"
    "7. HifiBerry Amp" "Enable/disable HifiBerry Amp & Amp+ audio card support"
    "8. HifiBerry DAC" "Enable/disable HifiBerry DAC audio card support"
    "9. HifiBerry DAC+" "Enable/disable HifiBerry DAC+ audio card support"
    "10. HifiBerry Digi" "Enable/disable HifiBerry Digi & Digi+ audio card support"
    "11. HifiBerry D+Pro" "Enable/disable HifiBerry Digi+ Pro audio card support"
    "12. IQaudio DAC" "Enable/disable IQaudio DAC audio card support"
    "13. IQaudio DAC+" "Enable/disable IQaudio DAC+ audio card support"
    "14. IQaudio WM8804" "Enable/disable IQAudIO Digi WM8804 audio card support"
    )

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]="dtp_ask audio"
    [${MENU_ITEMS[2]}]=audio_pwm_mode
    [${MENU_ITEMS[4]}]="dto_ask allo-boss-dac-pcm512x-audio"
    [${MENU_ITEMS[6]}]="dto_ask allo-digione"
    [${MENU_ITEMS[8]}]="dto_ask fe-pi-audio"
    [${MENU_ITEMS[10]}]="dto_ask googlevoicehat-soundcard"
    [${MENU_ITEMS[12]}]="dto_ask hifiberry-amp"
    [${MENU_ITEMS[14]}]="dto_ask hifiberry-dac"
    [${MENU_ITEMS[16]}]="dto_ask hifiberry-dacplus"
    [${MENU_ITEMS[18]}]="dto_ask hifiberry-digi"
    [${MENU_ITEMS[20]}]="dto_ask hifiberry-digi-pro"
    [${MENU_ITEMS[22]}]="dto_ask iqaudio-dac"
    [${MENU_ITEMS[24]}]="dto_ask iqaudio-dacplus"
    [${MENU_ITEMS[26]}]="dto_ask iqaudio-digi-wm8804-audio"
    )

    dialog_menu $MENU_ARGS
}


menu_network()
{
    local MENU_TITLES=(
    "Enable/Disable Network Devices" "Choose an Option")

    local MENU_BUTTONS=("Select" "Cancel")

    local MENU_ITEMS=(
    "1. RPi3 Bluetooth" "Enable/disable RPi3 onboard Bluetooth"
    "2. RPi3 Wifi" "Enable/disable RPi3 onboard WiFi")

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]="bt_ask"
    [${MENU_ITEMS[2]}]="rpi3_req && dto_ask pi3-disable-wifi --reverse")

    dialog_menu $MENU_ARGS
}


menu_misc()
{
    local MENU_TITLES=(
    "Enable/disable Miscellaneous Devices" "Choose an Option")

    local MENU_BUTTONS=("Select" "Cancel")

    local MENU_ITEMS=(
    "1. LIRC RPi" "Linux Infrared Remote Control for the RPi (LIRC)"
    "2. I2C RTC" "Realtime Cock (RTC) support")

    declare -A MENU_ACTIONS=(
    [${MENU_ITEMS[0]}]="dto_ask lirc-rpi"
    [${MENU_ITEMS[2]}]=menu_rtc)

    dialog_menu $MENU_ARGS
}


show_info()
{
    sys_info

    msg_box "System Information - $DATE_TIME" \
"* OS INFORMATION *
OS Release: $OS_NAME $OS_VER_ID ($ARCH)
SELinux Mode: $SE_MODE
Running Kernel: $CUR_KERN
Memory Free (kB): $MEM_FREE
Memory Available (kB): $MEM_AVLB
\n* HARDWARE INFORMATION *
Model: $RPI_MODEL
Revision: $BOARD_REV (${MFG_INFO[$BOARD_REV]})
CPU Temp: $CPU_TEMP C
CPU Freq Current (MHz): $CPU_CUR
CPU Freq Maximum (MHz): $CPU_MAX
CPU Freq Minimum (MHz): $CPU_MIN"
}


about()
{
    msg_box "About $NAME - Version: $VERSION"  "\
$NAME allows for easy configuration of various \
system wide options in FedBerry. If you have heavily \
customised your FedBerry installation, some configure \
options may not function correctly.\n\n\
Copyright (C) $YEAR, $AUTHORS.\n\
$NAME is released under GPL licence version 3.\n\n\
Report issues to: $BUG_REPORTS"
}


usage()
{
echo "Usage: $NAME [OPTION] <overlay|paramater|option|value>

Configuration of various system wide options in FedBerry.

--dto-enable <overlay>      Enable Device Tree overlay
--dto-disable <overlay>     Disable Device Tree overlay
--dtp-enable <paramater>    Enable Device Tree parameter
--dtp-disable <paramater>   Device Tree parameter
--cfg-enable <option>       Enable config.txt option
--cfg-disable <option>      Disable config.txt option
--rootfs-grow               Expand (grow) root filesystem on SD card
--bt-enable                 Enable bluetooth support for RPi3
--bt-disable                Disable bluetooth support for RPi3
--add-swap <size in MB>     Add and enable a swap file
--selinux <option>          Set SELinux mode (enforcing, permissive, disabled)
--bootsplash <option>       Plymouth graphical bootsplash (enable, disable)
--sys-info                  Show current system information
--version                   Output version information and exit
--help                      Display this help and exit"
}


requires()
{

    if [ $UID != 0 ]; then
        echo "$NAME must be run as root user."
        exit 1
    fi

    if [[ $NO_DIALOG -eq 0 ]]; then
        # we require whiptail
        if [ ! -f /usr/bin/whiptail ]; then
            echo "$NAME requires whiptail. Please install"
            # offer to install here?
            exit 1
        fi
    fi
}


sys_info()
{
    # Hardware Info
    # get cpuinfo_cur_freq 1st otherwise CPU speed jumps & always shows max_freq
    CPU_CUR=$(($( </sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq)/1000))
    CPU_MAX=$(($( </sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq)/1000))
    CPU_MIN=$(($( </sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq)/1000))
    CPU_TEMP=$(($( </sys/class/thermal/thermal_zone0/temp)/1000))

    # OS Info
    DATE_TIME=$(date)
    SE_MODE=$(getenforce)
    CUR_KERN=$(uname -r |sed 's/.fc[0-9][0-9].'$ARCH'//')
    MEM_FREE=$(awk '/MemFree/ { print $2 }' /proc/meminfo)
    MEM_AVLB=$(awk '/MemAvailable/ { print $2 }' /proc/meminfo)
}


cmdline()
{
    CMD_ARG=$2

    if [[ "$CMD_ARG" == "" ]]; then
        echo "Missing argument"
        exit 0
    fi

    # we don't want a dialog or questions
    NO_DIALOG=1

    # check for script run requirements
    requires

    # check for & clean config.txt if necessary
    cfg_check

    # exclude some special cases for the moment
    if [[ "$CMD_ARG" == "vc4-kms-v3d" ]] || [[ "$CMD_ARG" == "start_x" ]]; then
        echo "Enabling/disabling ${REF_NAMES[$CMD_ARG]} via cmdline is currently unsupported"
        exit 0
    fi

    # weed out '-overlay' in dto names
    if [[ "$1" == "dto_enable" ]] || [[ "$1" == "dto_disable" ]]; then
        CMD_ARG=$(echo $CMD_ARG| sed 's/-overlay//')
    fi

    $1 $CMD_ARG
}


main()
{
    # check for script run requirements
    requires

    # check for & clean config.txt if necessary
    cfg_check

    # set WT dialog menu sizes
    dialog_size

    # start main menu
    menu_main

    # if needed, offer a reboot
    ask_reboot

    # clear screen & exit
    clear; exit 0
}



###
# Main
###

case $1 in
    "--dto-enable")
        cmdline dto_enable $2;;
    "--dto-disable")
        cmdline dto_disable $2;;
    "--dtp-enable")
        dtp_enable $2;;
    "--dtp-disable")
        dtp_disable $2;;
    "--cfg-enable")
        cmdline cfg_enable $2;;
    "--cfg-disable")
        cmdline cfg_enable $2;;
    "--rootfs-grow")
        NO_DIALOG=1 rootfs_grow;;
    "--bt-enable")
        NO_DIALOG=1 bt_enable;;
    "--bt-disable")
        NO_DIALOG=1 bt_disable;;
    "--add-swap")
        NO_DIALOG=1 swap_add $2;;
    "--selinux")
        NO_DIALOG=1 selinux $2;;
    "--bootsplash")
        NO_DIALOG=1 bootsplash $2;;
    "--sys-info")
        NO_DIALOG=1 show_info;;
    "--help")
        usage;;
    "--version")
        echo "$NAME - Version: $VERSION";;
    "")
        main;;
    *)
        echo "Unknown cmdline argument(s) $@";;
esac
